[user]
    email = josephlsanders@gmail.com
    name = jls83

[core]
    editor = nvim
    pager = delta

[delta]
    line-numbers = true

[alias]
    c = commit --verbose
    ca = commit -a --verbose
    cm = commit -m
    cam = commit -am

    d = diff

    s = status -s

    co = checkout
    cob = checkout -b
    clr = checkout -- .
    con = "!f() { git checkout -b $1 && git push joe $1 && git branch -u joe/$1; }; f"

    cof = "!f() { git fetch $1 $2 && git checkout $2; }; f"

    la = "!git config -l | grep alias | cut -c 7-"
    br = for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:blue)%(objectname:short=7)%(color:reset) - %(align:40,left)%(if)%(upstream:short)%(then)%(color:cyan)%(upstream:short)%(color:reset)%(else)%(color:yellow)%(refname:short)%(color:reset)%(end) %(if:notequals=jls83)%(authorname)%(then)[%(authorname)]%(end)%(end)%09%(align:20,right)%(color:green)%(committerdate:relative)%(color:reset)%(end)'

    hi = "!git --no-pager log --oneline -10 --first-parent --author=jls83"

    wh = "!git add . && git commit --amend -n"

    # USAGE: git ron branch src_branch dest_branch
    # `rebase --onto` is confusing as ALL HELL unless you sit and think about it for a while
    # (I have to read the docs _every time_ I use it). Instead, this uses the familiar pattern
    # of `command object src dest` that just about everything else uses.
    #
    # NOTE: The `branch` arguments can be any tree-ish that Git uses (e.g. a branch name,
    # a commit hash, etc.)
    ron = "!f() { git rebase --onto $3 $2 $1; }; f"


[filter "lfs"]
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f

[url "git@github.com:"]
    insteadOf = https://github.com/
